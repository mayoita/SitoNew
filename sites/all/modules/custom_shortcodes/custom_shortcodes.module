<?php

/**
* Define our shortcodes and their titles, descriptions, and callback functions
*
* See comments below for explanation
*/

function custom_shortcodes_shortcode_info() {

    $shortcodes['box-colorbg'] = array(
        'title' => t('Box ColorBG'),  // The title of this shortcode, displayed in the Drupal backend for administrators to enable/disable shortcodes for input types
        'description' => t('Add a box with a specified background color.'),  // Description shown along with the title in the Drupal backend
        'process callback' => 'custom_shortcodes_shortcode_box_colorbg', // Custom function that deals with the variables and html output
        'tips callback' => 'custom_shortcodes_shortcode_box_colorbg_tip' // Custom function that displays some help text to the user
    );
    $shortcodes['box-toggle'] = array(
        'title' => t('Box Toggle'),  // The title of this shortcode, displayed in the Drupal backend for administrators to enable/disable shortcodes for input types
        'description' => t('Add a collapse box.'),  // Description shown along with the title in the Drupal backend
        'process callback' => 'custom_shortcodes_shortcode_box_toggle', // Custom function that deals with the variables and html output
        'tips callback' => 'custom_shortcodes_shortcode_box_toggle_tip' // Custom function that displays some help text to the user
    );

    // $shortcodes['second_shortcode'] = array();
    // $shortcodes['third_shortcode'] = array();
    // and so on...

    return $shortcodes;
}

/**
 * Define our variables (parameters) for each shortcode
 */
function custom_shortcodes_theme() {
    return array(
        'shortcode_box_colorbg' => array(
            'variables' => array('color' => 'green'),
        ),
        'shortcode_box_toggle' => array(
            'variables' => array('title' => 'Title'),
        ),
        // 'second_shortcode' => array(),
        // 'third_shortcode' => array(),
        // and so on...
    );
}
/**
 * Define our process callback function for our [button] shortcode. This
 * takes in our shortcode attributes from the shortcode and if empty, sets the property
 * to the default value stated in this function.  We then pass in our attributes to the
 * theme() function which outputs the HTML.
 *
 * $attrs = shortcode_attrs(array(
 *     'attribute' => 'default_value_goes_here'
 * ),
 */
function custom_shortcodes_shortcode_box_colorbg($attrs, $text) {
    $attrs = shortcode_attrs(array(
        'color' => '#396451'
    ),
        $attrs
    );

    return theme('shortcode_box_colorbg', array('color' => $attrs['color'], 'text' => $text));
}
function custom_shortcodes_shortcode_box_toggle($attrs, $text) {
    $attrs = shortcode_attrs(array(
        'title' => 'Title'
    ),
        $attrs
    );

    return theme('shortcode_box_toggle', array('title' => $attrs['title'],'text' => $text));
}


/**
 * This function uses the attributes passed in to return the HTML of this shortcode.
 */
function theme_shortcode_box_colorbg($vars) {
    if ($vars['color'] == 'white')
        return '<div class="color-bg box-whitebg">' . $vars['text'] . '</div>';
    return '<div class="color-bg" style="background-color:' . $vars['color'] . '">' . $vars['text'] . '</div>';
}
function theme_shortcode_box_toggle($vars) {
    return '<div class="box-expandable"><h3 class="box-toggle">' . $vars['title'] . '</h3><div class="box-content box-content-collapsed">' . $vars['text'] . '</div></div>';

}
/**
 * This function outputs some tips to the user beneath the WYSIWYG editor so they know
 * what the shortcode does and how to use it.
 */
function custom_shortcodes_shortcode_box_colorbg_tip($format, $long) {
    $output = array();
    $output[] = '<p><strong>' . t('[box-colorbg color=#{hex-format}]text[/box-colorbg]') . '</strong> ';
    if ($long) {
        $output[] = t('Outputs text inside div with the specified background color.') . '</p>';
    }
    else {
        $output[] = t('Outputs text with specified bg color.') . '</p>';
    }

    return implode(' ', $output);
}